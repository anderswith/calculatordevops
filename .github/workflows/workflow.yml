name: Workflow

on:
  push:
    branches:
      - main

jobs:
  update-config:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install required tools
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet tool install --global dotnet-stryker
          dotnet tool install -g dotnet-sonarscanner

      - name: Set SQL Connection String
        run: |
          echo "SQL_CONNECTION_STRING=${{ secrets.SQL_CONNECTION_STRING }}" >> $GITHUB_ENV

      - name: Verify SQL Connection String
        run: echo $SQL_CONNECTION_STRING

      - name: Application Version
        id: semver-app
        uses: paulhatch/semantic-version@v5.4.0
        with:
          bump_each_commit: true
          bump_each_commit_patch_pattern: 'bugfix'
          tag_prefix: "v"

      - name: Display Version
        run: echo "Generated version is ${{ steps.semver-app.outputs.version}}"
        
      - name: Install K6
        run: |
          sudo snap install k6
          
      - name: Wait for API to start
        run: |
          echo "Waiting for the API to be available..."
          until curl --silent --fail -v http://127.0.0.1:5062/api/Calculator/Calculations; do
            echo "Waiting for API to respond..."
            sleep 2
          done
          echo "API is available!"


      - name: Verify if API is running
        run: |
          curl --fail http://127.0.0.1:5062/api/Calculator/Calculations || exit 1

      - name: Verify API is accessible
        run: |
          curl --fail http://localhost:5062/api/Calculator/Calculations || exit 1

      - name: Run K6 Spike Test
        run: k6 run k6-tests/spike-test.js

      - name: Run unit tests
        run: |
          dotnet test --collect:"XPlat Code Coverage" --results-directory coverage

      - name: Generate report
        run: |
          reportgenerator -reports:"TestResults/**/coverage.cobertura.xml" -targetdir:coverage-report -reporttypes:Html

      - name: Run Mutation Tests
        run: |
          dotnet stryker --threshold-high 80

      - name: Collect Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/**/coverage.cobertura.xml

      - name: Collect Stryker Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stryker-report
          path: StrykerOutput
          
      - name: Check Secret Variables
        run: |
          echo "Sonar URL: ${{ secrets.SECRET_SONAR_URL }}"
          echo "Sonar Token: ${{ secrets.SECRET_SONAR_TOKEN }}"

      - name: Start Static Code Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"AW-DevOps-Calculator" \
            /d:sonar.host.url="${{ vars.SECRET_SONAR_URL }}" \
            /d:sonar.token="${{ secrets.SECRET_SONAR_TOKEN }}" \
            /d:sonar.coverageReportPaths="coverage-report/SonarQube.xml" \
            /d:sonar.exclusions="coverage-report/**/*.html,coverage-report/**/*.css,coverage-report/**/*,DevOpsCalculator/DAL/**/*,calculator-frontend-main/**/*,**/Program.cs" \
            /d:sonar.qualitygate.wait=true \
            /d:sonar.qualitygate.timeout=300

      - name: Build
        run: dotnet build
        
      - name: Run unit tests
        run: dotnet test --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Generate sonar report
        run: |
          reportgenerator \
          -reports:TestResults/**/coverage.cobertura.xml \
          -targetdir:coverage-report \
          -reporttypes:SonarQube

      - name: Complete Static Code Analysis
        run: |
          dotnet sonarscanner end \
            /d:sonar.token="${{secrets.SECRET_SONAR_TOKEN}}"
          
      
   