on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up SSH and deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_SERVER_SSH_KEY }}
          SERVER_USER: ${{ vars.STAGING_SERVER_USERNAME }}
          SERVER_IP: ${{ vars.STAGING_SERVER_IP }}

        run: |
          # Set up the SSH private key correctly
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Ensure GitHub's SSH key is added to known_hosts
          mkdir -p ~/.ssh
          if ! grep -q github.com ~/.ssh/known_hosts; then
            echo "Adding GitHub's SSH key to known_hosts"
            ssh-keyscan github.com >> ~/.ssh/known_hosts
          fi

          # Start SSH agent and add private key
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
          
          # Test SSH connection to remote server
          ssh -o StrictHostKeyChecking=no -v $SERVER_USER@$SERVER_IP "echo 'SSH connection successful'"

          # Deploy application (your original steps)
          ssh -o StrictHostKeyChecking=no -v $SERVER_USER@$SERVER_IP << 'EOF'
            set -e  # Stop script on error

            # Ensure /var/www/calculator exists and is a Git repository
            if [ ! -d "/var/www/calculator/.git" ]; then
              echo "Directory /var/www/calculator not found. Cloning repository..."
              sudo mkdir -p /var/www/calculator
              sudo chown -R $USER:$USER /var/www/calculator
              cd /var/www/calculator
              # Clone repository using SSH
              git clone git@github.com:anderswith/calculatordevops.git .  # Using SSH URL to clone the repository
            else
              echo "Navigating to /var/www/calculator and pulling the latest code..."
              cd /var/www/calculator
              git pull origin main  # Pulling the latest code if the directory already exists
            fi

            # Build and restart the service
            dotnet build
            sudo systemctl daemon-reload
            sudo systemctl restart calculator
            sudo systemctl status calculator --no-pager
            echo "✅ Deployment completed successfully!"
          EOF

          # Check the status of the application
          sudo systemctl status calculator --no-pager || exit 1

          echo "✅ Deployment completed successfully!"


